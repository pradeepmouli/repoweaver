{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { nanoid } from 'nanoid/non-secure';\nimport { BaseRouter } from \"./BaseRouter.js\";\nvar TYPE_ROUTE = 'route';\nexport var TabActions = {\n  jumpTo: function jumpTo(name, params) {\n    return {\n      type: 'JUMP_TO',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  }\n};\nvar getRouteHistory = function getRouteHistory(routes, index, backBehavior, initialRouteName) {\n  var history = [{\n    type: TYPE_ROUTE,\n    key: routes[index].key\n  }];\n  var initialRouteIndex;\n  switch (backBehavior) {\n    case 'order':\n      for (var i = index; i > 0; i--) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[i - 1].key\n        });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(function (route) {\n        return route.name === initialRouteName;\n      });\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key\n        });\n      }\n      break;\n    case 'history':\n    case 'fullHistory':\n      break;\n  }\n  return history;\n};\nvar changeIndex = function changeIndex(state, index, backBehavior, initialRouteName) {\n  var history = state.history;\n  if (backBehavior === 'history' || backBehavior === 'fullHistory') {\n    var currentRouteKey = state.routes[index].key;\n    if (backBehavior === 'history') {\n      history = history.filter(function (it) {\n        return it.type === 'route' ? it.key !== currentRouteKey : false;\n      });\n    } else if (backBehavior === 'fullHistory') {\n      var _history$lastHistoryR;\n      var lastHistoryRouteItemIndex = history.findLastIndex(function (item) {\n        return item.type === 'route';\n      });\n      if (currentRouteKey === ((_history$lastHistoryR = history[lastHistoryRouteItemIndex]) == null ? void 0 : _history$lastHistoryR.key)) {\n        history = [].concat(_toConsumableArray(history.slice(0, lastHistoryRouteItemIndex)), _toConsumableArray(history.slice(lastHistoryRouteItemIndex + 1)));\n      }\n    }\n    history = history.concat({\n      type: TYPE_ROUTE,\n      key: currentRouteKey\n    });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    index: index,\n    history: history\n  });\n};\nexport function TabRouter(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    _ref$backBehavior = _ref.backBehavior,\n    backBehavior = _ref$backBehavior === void 0 ? 'firstRoute' : _ref$backBehavior;\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'tab',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n      var routes = routeNames.map(function (name) {\n        return {\n          name: name,\n          key: `${name}-${nanoid()}`,\n          params: routeParamList[name]\n        };\n      });\n      var history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes,\n        preloadedRouteKeys: []\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var _state$routes, _state$index, _state$history$filter, _state$history, _state$preloadedRoute, _state$preloadedRoute2;\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = routeNames.map(function (name) {\n        var route = state.routes.find(function (r) {\n          return r.name === name;\n        });\n        return _objectSpread(_objectSpread({}, route), {}, {\n          name: name,\n          key: route && route.name === name && route.key ? route.key : `${name}-${nanoid()}`,\n          params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), route ? route.params : undefined) : route ? route.params : undefined\n        });\n      });\n      var index = Math.min(Math.max(routeNames.indexOf((_state$routes = state.routes[(_state$index = state == null ? void 0 : state.index) != null ? _state$index : 0]) == null ? void 0 : _state$routes.name), 0), routes.length - 1);\n      var routeKeys = routes.map(function (route) {\n        return route.key;\n      });\n      var history = (_state$history$filter = (_state$history = state.history) == null ? void 0 : _state$history.filter(function (it) {\n        return routeKeys.includes(it.key);\n      })) != null ? _state$history$filter : [];\n      return changeIndex({\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index: index,\n        routeNames: routeNames,\n        history: history,\n        routes: routes,\n        preloadedRouteKeys: (_state$preloadedRoute = (_state$preloadedRoute2 = state.preloadedRouteKeys) == null ? void 0 : _state$preloadedRoute2.filter(function (key) {\n          return routeKeys.includes(key);\n        })) != null ? _state$preloadedRoute : []\n      }, index, backBehavior, initialRouteName);\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref4) {\n      var routeNames = _ref4.routeNames,\n        routeParamList = _ref4.routeParamList,\n        routeKeyChanges = _ref4.routeKeyChanges;\n      var routes = routeNames.map(function (name) {\n        return state.routes.find(function (r) {\n          return r.name === name && !routeKeyChanges.includes(r.name);\n        }) || {\n          name: name,\n          key: `${name}-${nanoid()}`,\n          params: routeParamList[name]\n        };\n      });\n      var index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n      var history = state.history.filter(function (it) {\n        return it.type !== 'route' || routes.find(function (r) {\n          return r.key === it.key;\n        });\n      });\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        history: history,\n        routeNames: routeNames,\n        routes: routes,\n        index: index\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n    getStateForAction: function getStateForAction(state, action, _ref5) {\n      var routeParamList = _ref5.routeParamList,\n        routeGetIdList = _ref5.routeGetIdList;\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n        case 'NAVIGATE_DEPRECATED':\n          {\n            var index = state.routes.findIndex(function (route) {\n              return route.name === action.payload.name;\n            });\n            if (index === -1) {\n              return null;\n            }\n            var updatedState = changeIndex(_objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route) {\n                if (route.name !== action.payload.name) {\n                  return route;\n                }\n                var getId = routeGetIdList[route.name];\n                var currentId = getId == null ? void 0 : getId({\n                  params: route.params\n                });\n                var nextId = getId == null ? void 0 : getId({\n                  params: action.payload.params\n                });\n                var key = currentId === nextId ? route.key : `${route.name}-${nanoid()}`;\n                var params;\n                if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                  params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[route.name]), route.params), action.payload.params) : route.params;\n                } else {\n                  params = routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : action.payload.params;\n                }\n                var path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                return params !== route.params || path !== route.path ? _objectSpread(_objectSpread({}, route), {}, {\n                  key: key,\n                  path: path,\n                  params: params\n                }) : route;\n              })\n            }), index, backBehavior, initialRouteName);\n            return _objectSpread(_objectSpread({}, updatedState), {}, {\n              preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(function (key) {\n                return key !== state.routes[updatedState.index].key;\n              })\n            });\n          }\n        case 'GO_BACK':\n          {\n            var _state$history2;\n            if (state.history.length === 1) {\n              return null;\n            }\n            var previousKey = (_state$history2 = state.history[state.history.length - 2]) == null ? void 0 : _state$history2.key;\n            var _index = state.routes.findLastIndex(function (route) {\n              return route.key === previousKey;\n            });\n            if (_index === -1) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {\n                return key !== state.routes[_index].key;\n              }),\n              history: state.history.slice(0, -1),\n              index: _index\n            });\n          }\n        case 'PRELOAD':\n          {\n            var routeIndex = state.routes.findIndex(function (route) {\n              return route.name === action.payload.name;\n            });\n            if (routeIndex === -1) {\n              return null;\n            }\n            var route = state.routes[routeIndex];\n            var getId = routeGetIdList[route.name];\n            var currentId = getId == null ? void 0 : getId({\n              params: route.params\n            });\n            var nextId = getId == null ? void 0 : getId({\n              params: action.payload.params\n            });\n            var key = currentId === nextId ? route.key : `${route.name}-${nanoid()}`;\n            var params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), action.payload.params) : undefined;\n            var newRoute = params !== route.params ? _objectSpread(_objectSpread({}, route), {}, {\n              key: key,\n              params: params\n            }) : route;\n            return _objectSpread(_objectSpread({}, state), {}, {\n              preloadedRouteKeys: state.preloadedRouteKeys.filter(function (key) {\n                return key !== route.key;\n              }).concat(newRoute.key),\n              routes: state.routes.map(function (route, index) {\n                return index === routeIndex ? newRoute : route;\n              }),\n              history: key === route.key ? state.history : state.history.filter(function (record) {\n                return record.key !== route.key;\n              })\n            });\n          }\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: TabActions\n  });\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentRouteKey","filter","it","_history$lastHistoryR","lastHistoryRouteItemIndex","findLastIndex","item","concat","_toConsumableArray","slice","_objectSpread","TabRouter","_ref","_ref$backBehavior","router","getInitialState","_ref2","routeNames","routeParamList","undefined","includes","indexOf","map","stale","preloadedRouteKeys","getRehydratedState","partialState","_ref3","_state$routes","_state$index","_state$history$filter","_state$history","_state$preloadedRoute","_state$preloadedRoute2","find","r","Math","min","max","length","routeKeys","getStateForRouteNamesChange","_ref4","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","_ref5","routeGetIdList","updatedState","getId","currentId","nextId","merge","path","_state$history2","previousKey","routeIndex","newRoute","record","actionCreators"],"sources":["/Users/pmouli/Documents/GitHub.nosync/boots-strapper/mobile/node_modules/@react-navigation/routers/src/TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport { BaseRouter } from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'firstRoute'\n  | 'initialRoute'\n  | 'order'\n  | 'history'\n  | 'fullHistory'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  /**\n   * Control how going back should behave\n   * - `firstRoute` - return to the first defined route\n   * - `initialRoute` - return to the route from `initialRouteName`\n   * - `order` - return to the route defined before the focused route\n   * - `history` - return to last visited route; if the same route is visited multiple times, the older entries are dropped from the history\n   * - `fullHistory` - return to last visited route; doesn't drop duplicate entries unlike `history` - matches behavior of web pages\n   * - `none` - do not handle going back\n   */\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n  /**\n   * List of routes' key, which are supposed to be preloaded before navigating to.\n   */\n  preloadedRouteKeys: string[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param screen Name of the route to jump to.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends keyof ParamList>(\n    ...args: RouteName extends unknown\n      ? undefined extends ParamList[RouteName]\n        ? [screen: RouteName, params?: ParamList[RouteName]]\n        : [screen: RouteName, params: ParamList[RouteName]]\n      : never\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object) {\n    return {\n      type: 'JUMP_TO',\n      payload: { name, params },\n    } as const satisfies TabActionType;\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n    case 'fullHistory':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history = state.history;\n\n  if (backBehavior === 'history' || backBehavior === 'fullHistory') {\n    const currentRouteKey = state.routes[index].key;\n\n    if (backBehavior === 'history') {\n      // Remove the existing key from the history to de-duplicate it\n      history = history.filter((it) =>\n        it.type === 'route' ? it.key !== currentRouteKey : false\n      );\n    } else if (backBehavior === 'fullHistory') {\n      const lastHistoryRouteItemIndex = history.findLastIndex(\n        (item) => item.type === 'route'\n      );\n\n      if (currentRouteKey === history[lastHistoryRouteItemIndex]?.key) {\n        // For full-history, only remove if it matches the last route\n        // Useful for drawer, if current route was in history, then drawer state changed\n        // Then we only need to move the route to the front\n        history = [\n          ...history.slice(0, lastHistoryRouteItemIndex),\n          ...history.slice(lastHistoryRouteItemIndex + 1),\n        ];\n      }\n    }\n\n    history = history.concat({\n      type: TYPE_ROUTE,\n      key: currentRouteKey,\n    });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n        preloadedRouteKeys: [],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      const state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n                ? route.params\n                : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const routeKeys = routes.map((route) => route.key);\n\n      const history =\n        state.history?.filter((it) => routeKeys.includes(it.key)) ?? [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys:\n            state.preloadedRouteKeys?.filter((key) =>\n              routeKeys.includes(key)\n            ) ?? [],\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList, routeGetIdList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE':\n        case 'NAVIGATE_DEPRECATED': {\n          const index = state.routes.findIndex(\n            (route) => route.name === action.payload.name\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          const updatedState = changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route) => {\n                if (route.name !== action.payload.name) {\n                  return route;\n                }\n\n                const getId = routeGetIdList[route.name];\n\n                const currentId = getId?.({ params: route.params });\n                const nextId = getId?.({ params: action.payload.params });\n\n                const key =\n                  currentId === nextId\n                    ? route.key\n                    : `${route.name}-${nanoid()}`;\n\n                let params;\n\n                if (\n                  (action.type === 'NAVIGATE' ||\n                    action.type === 'NAVIGATE_DEPRECATED') &&\n                  action.payload.merge &&\n                  currentId === nextId\n                ) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, key, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n\n          return {\n            ...updatedState,\n            preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(\n              (key) => key !== state.routes[updatedState.index].key\n            ),\n          };\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2]?.key;\n          const index = state.routes.findLastIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            preloadedRouteKeys: state.preloadedRouteKeys.filter(\n              (key) => key !== state.routes[index].key\n            ),\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        case 'PRELOAD': {\n          const routeIndex = state.routes.findIndex(\n            (route) => route.name === action.payload.name\n          );\n\n          if (routeIndex === -1) {\n            return null;\n          }\n\n          const route = state.routes[routeIndex];\n\n          const getId = routeGetIdList[route.name];\n\n          const currentId = getId?.({ params: route.params });\n          const nextId = getId?.({ params: action.payload.params });\n\n          const key =\n            currentId === nextId ? route.key : `${route.name}-${nanoid()}`;\n\n          const params =\n            action.payload.params !== undefined ||\n            routeParamList[route.name] !== undefined\n              ? {\n                  ...routeParamList[route.name],\n                  ...action.payload.params,\n                }\n              : undefined;\n\n          const newRoute =\n            params !== route.params ? { ...route, key, params } : route;\n\n          return {\n            ...state,\n            preloadedRouteKeys: state.preloadedRouteKeys\n              .filter((key) => key !== route.key)\n              .concat(newRoute.key),\n            routes: state.routes.map((route, index) =>\n              index === routeIndex ? newRoute : route\n            ),\n            history:\n              key === route.key\n                ? state.history\n                : state.history.filter((record) => record.key !== route.key),\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}