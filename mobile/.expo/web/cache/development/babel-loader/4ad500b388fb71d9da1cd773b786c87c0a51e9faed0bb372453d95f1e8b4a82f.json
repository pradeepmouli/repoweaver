{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertExpoModulesPresent = assertExpoModulesPresent;\nexports.getErrorCallback = void 0;\nexports.getIsRenderToImageSupported = getIsRenderToImageSupported;\nexports.setDynamicLoadingErrorCallback = exports.setDynamicLoadingEnabled = exports.isDynamicLoadingSupported = exports.isDynamicLoadingEnabled = void 0;\nfunction getIsDynamicLoadingSupported(globalObj) {\n  return globalObj?.expo && typeof globalObj.expo.modules?.ExpoAsset?.downloadAsync === 'function' && typeof globalObj.expo.modules?.ExpoFontLoader?.getLoadedFonts === 'function' && typeof globalObj.expo.modules?.ExpoFontLoader?.loadAsync === 'function';\n}\nfunction getIsRenderToImageSupported(globalObj) {\n  return globalObj?.expo && typeof globalObj.expo.modules?.ExpoFontUtils?.renderToImageAsync === 'function';\n}\nfunction assertExpoModulesPresent(globalObj) {\n  if (!getIsDynamicLoadingSupported(globalObj)) {\n    throw new Error('Dynamic font loading for Expo is not available.');\n  }\n}\nconst hasNecessaryExpoModules = !!globalThis.expo?.modules?.ExpoAsset && !!globalThis.expo?.modules?.ExpoFontLoader;\nconst hasNecessaryExpoFeatures = getIsDynamicLoadingSupported(globalThis);\nlet dynamicFontLoadingEnabled = hasNecessaryExpoFeatures;\nconst isDynamicLoadingSupported = () => hasNecessaryExpoFeatures;\nexports.isDynamicLoadingSupported = isDynamicLoadingSupported;\nconst setDynamicLoadingEnabled = value => {\n  if (!hasNecessaryExpoFeatures) {\n    if (process.env.NODE_ENV !== 'production' && !!value) {\n      const message = hasNecessaryExpoModules ? 'Expo is installed, but does not support dynamic font loading. Make sure to use Expo SDK 52 or newer.' : 'Necessary Expo modules not found. Dynamic font loading is not available on Web or when necessary Expo modules are not present.';\n      console.error(message);\n    }\n    return false;\n  }\n  dynamicFontLoadingEnabled = !!value;\n  return true;\n};\nexports.setDynamicLoadingEnabled = setDynamicLoadingEnabled;\nconst isDynamicLoadingEnabled = () => dynamicFontLoadingEnabled;\nexports.isDynamicLoadingEnabled = isDynamicLoadingEnabled;\nlet dynamicLoadingErrorCallback;\nconst setDynamicLoadingErrorCallback = callback => {\n  dynamicLoadingErrorCallback = callback;\n};\nexports.setDynamicLoadingErrorCallback = setDynamicLoadingErrorCallback;\nconst getErrorCallback = () => dynamicLoadingErrorCallback;\nexports.getErrorCallback = getErrorCallback;","map":{"version":3,"names":["getIsDynamicLoadingSupported","globalObj","expo","modules","ExpoAsset","downloadAsync","ExpoFontLoader","getLoadedFonts","loadAsync","getIsRenderToImageSupported","ExpoFontUtils","renderToImageAsync","assertExpoModulesPresent","Error","hasNecessaryExpoModules","globalThis","hasNecessaryExpoFeatures","dynamicFontLoadingEnabled","isDynamicLoadingSupported","exports","setDynamicLoadingEnabled","value","process","env","NODE_ENV","message","console","error","isDynamicLoadingEnabled","dynamicLoadingErrorCallback","setDynamicLoadingErrorCallback","callback","getErrorCallback"],"sources":["/Users/pmouli/Documents/GitHub.nosync/boots-strapper/mobile/node_modules/@react-native-vector-icons/common/src/dynamicLoading/dynamic-loading-setting.ts"],"sourcesContent":["import type { FontSource } from './types';\n\ntype ExpoAssetModule = {\n  // definition from\n  // https://github.com/expo/expo/blob/1f5a5991d14aad09282d1ce1612b44d30e7e7d3d/packages/expo-asset/ios/AssetModule.swift#L23\n  downloadAsync: (uri: string, hash: string | undefined, type: string) => Promise<string>;\n};\n\ntype ExpoFontLoaderModule = {\n  // definition from\n  // https://github.com/expo/expo/blob/1f5a5991d14aad09282d1ce1612b44d30e7e7d3d/packages/expo-font/ios/FontLoaderModule.swift#L18\n  getLoadedFonts: () => string[];\n  loadAsync: (fontFamilyAlias: string, fileUri: string) => Promise<void>;\n};\n\ntype ExpoFontUtilsModule = {\n  renderToImageAsync: (\n    glyph: string,\n    options: {\n      fontFamily?: string;\n      size?: number;\n      color?: number;\n    },\n  ) => Promise<string>;\n};\n\ndeclare global {\n  interface ExpoGlobal {\n    modules: {\n      ExpoAsset?: ExpoAssetModule;\n      ExpoFontLoader?: ExpoFontLoaderModule;\n      ExpoFontUtils?: ExpoFontUtilsModule;\n    };\n  }\n\n  // eslint-disable-next-line vars-on-top\n  var expo: ExpoGlobal | undefined;\n}\n\ntype ExpoGlobalType = {\n  modules: {\n    ExpoAsset: ExpoAssetModule;\n    ExpoFontLoader: ExpoFontLoaderModule;\n  };\n};\n\n// biome-ignore lint/suspicious/noExplicitAny: this is used internally with globalThis\nfunction getIsDynamicLoadingSupported(globalObj: any): globalObj is {\n  expo: ExpoGlobalType;\n} {\n  return (\n    globalObj?.expo &&\n    typeof globalObj.expo.modules?.ExpoAsset?.downloadAsync === 'function' &&\n    typeof globalObj.expo.modules?.ExpoFontLoader?.getLoadedFonts === 'function' &&\n    typeof globalObj.expo.modules?.ExpoFontLoader?.loadAsync === 'function'\n  );\n}\n\n// biome-ignore lint/suspicious/noExplicitAny: this is used internally with globalThis\nexport function getIsRenderToImageSupported(globalObj: any): globalObj is {\n  expo: {\n    modules: {\n      ExpoFontUtils: ExpoFontUtilsModule;\n    };\n  };\n} {\n  return globalObj?.expo && typeof globalObj.expo.modules?.ExpoFontUtils?.renderToImageAsync === 'function';\n}\n\nexport function assertExpoModulesPresent(globalObj: unknown): asserts globalObj is { expo: ExpoGlobalType } {\n  if (!getIsDynamicLoadingSupported(globalObj)) {\n    throw new Error('Dynamic font loading for Expo is not available.');\n  }\n}\n\nconst hasNecessaryExpoModules = !!globalThis.expo?.modules?.ExpoAsset && !!globalThis.expo?.modules?.ExpoFontLoader;\n\nconst hasNecessaryExpoFeatures = getIsDynamicLoadingSupported(globalThis);\n\nlet dynamicFontLoadingEnabled = hasNecessaryExpoFeatures;\n\nexport const isDynamicLoadingSupported = () => hasNecessaryExpoFeatures;\n\n/**\n * Set whether dynamic loading of fonts is enabled.\n * Currently, the presence of Expo Asset and Font Loader modules is a prerequisite for enabling.\n * In the future, React Native core apis will be used for dynamic font loading.\n *\n * @param value - whether dynamic loading of fonts is enabled\n * @returns `true` if dynamic loading of fonts was successfully set. `false` otherwise.\n * */\nexport const setDynamicLoadingEnabled = (value: boolean): boolean => {\n  if (!hasNecessaryExpoFeatures) {\n    if (process.env.NODE_ENV !== 'production' && !!value) {\n      const message = hasNecessaryExpoModules\n        ? 'Expo is installed, but does not support dynamic font loading. Make sure to use Expo SDK 52 or newer.'\n        : 'Necessary Expo modules not found. Dynamic font loading is not available on Web or when necessary Expo modules are not present.';\n      console.error(message); // eslint-disable-line no-console\n    }\n    return false;\n  }\n\n  dynamicFontLoadingEnabled = !!value;\n\n  return true;\n};\n\n/**\n * Whether dynamic loading of fonts is enabled.\n * */\nexport const isDynamicLoadingEnabled = () => dynamicFontLoadingEnabled;\n\ntype ErrorCallback = (args: { error: Error; fontFamily: string; fontSource: FontSource }) => void;\n\nlet dynamicLoadingErrorCallback: undefined | ErrorCallback;\n\n/**\n * Set a callback to be called when an error occurs during dynamic font loading.\n * */\nexport const setDynamicLoadingErrorCallback = (callback: ErrorCallback) => {\n  dynamicLoadingErrorCallback = callback;\n};\n\nexport const getErrorCallback = () => dynamicLoadingErrorCallback;\n"],"mappings":";;;;;;;;;AA+CA,SAASA,4BAA4BA,CAACC,SAAc,EAElD;EACA,OACEA,SAAS,EAAEC,IAAI,IACf,OAAOD,SAAS,CAACC,IAAI,CAACC,OAAO,EAAEC,SAAS,EAAEC,aAAa,KAAK,UAAU,IACtE,OAAOJ,SAAS,CAACC,IAAI,CAACC,OAAO,EAAEG,cAAc,EAAEC,cAAc,KAAK,UAAU,IAC5E,OAAON,SAAS,CAACC,IAAI,CAACC,OAAO,EAAEG,cAAc,EAAEE,SAAS,KAAK,UAAU;AAE3E;AAGO,SAASC,2BAA2BA,CAACR,SAAc,EAMxD;EACA,OAAOA,SAAS,EAAEC,IAAI,IAAI,OAAOD,SAAS,CAACC,IAAI,CAACC,OAAO,EAAEO,aAAa,EAAEC,kBAAkB,KAAK,UAAU;AAC3G;AAEO,SAASC,wBAAwBA,CAACX,SAAkB,EAAiD;EAC1G,IAAI,CAACD,4BAA4B,CAACC,SAAS,CAAC,EAAE;IAC5C,MAAM,IAAIY,KAAK,CAAC,iDAAiD,CAAC;EACpE;AACF;AAEA,MAAMC,uBAAuB,GAAG,CAAC,CAACC,UAAU,CAACb,IAAI,EAAEC,OAAO,EAAEC,SAAS,IAAI,CAAC,CAACW,UAAU,CAACb,IAAI,EAAEC,OAAO,EAAEG,cAAc;AAEnH,MAAMU,wBAAwB,GAAGhB,4BAA4B,CAACe,UAAU,CAAC;AAEzE,IAAIE,yBAAyB,GAAGD,wBAAwB;AAEjD,MAAME,yBAAyB,GAAGA,CAAA,KAAMF,wBAAwB;AAEvEG,OAAA,CAAAD,yBAAA,GAAAA,yBAAA;AAQO,MAAME,wBAAwB,GAAIC,KAAc,IAAc;EACnE,IAAI,CAACL,wBAAwB,EAAE;IAC7B,IAAIM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAAC,CAACH,KAAK,EAAE;MACpD,MAAMI,OAAO,GAAGX,uBAAuB,GACnC,sGAAsG,GACtG,gIAAgI;MACpIY,OAAO,CAACC,KAAK,CAACF,OAAO,CAAC;IACxB;IACA,OAAO,KAAK;EACd;EAEAR,yBAAyB,GAAG,CAAC,CAACI,KAAK;EAEnC,OAAO,IAAI;AACb,CAAC;AAEDF,OAAA,CAAAC,wBAAA,GAAAA,wBAAA;AAGO,MAAMQ,uBAAuB,GAAGA,CAAA,KAAMX,yBAAyB;AAACE,OAAA,CAAAS,uBAAA,GAAAA,uBAAA;AAIvE,IAAIC,2BAAsD;AAKnD,MAAMC,8BAA8B,GAAIC,QAAuB,IAAK;EACzEF,2BAA2B,GAAGE,QAAQ;AACxC,CAAC;AAACZ,OAAA,CAAAW,8BAAA,GAAAA,8BAAA;AAEK,MAAME,gBAAgB,GAAGA,CAAA,KAAMH,2BAA2B;AAACV,OAAA,CAAAa,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}